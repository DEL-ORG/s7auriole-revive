pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3'
    }

    environment {
        APP_NAME = "test"
        RELEASE = "1.0.0"
        DOCKER_USER = "attamegnon/attamegnon2022"
        DOCKER_PASS = credentials('docker-hub')  // credential id for docker-hub we just created 
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Checkout from SCM") {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/revive-code']], userRemoteConfigs: [[url: 'https://github.com/DEL-ORG/s7auriole-revive.git']]])
                }
            }
        }

        stage("Build Application") {
            steps {
                script {
                    sh 'mvn clean package'
                }
            }
        }

        stage("Test Application") {
            steps {
                script {
                    sh 'mvn test'
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        withSonarQubeEnv(credentialsId: 'sonarqube') {
                            sh "mvn clean verify sonar:sonar"
                        }
                    }
                }
            }
        }

        // Uncomment this stage if you want to include Quality Gate
        // stage("Quality Gate") {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
        //         }
        //     }
        // }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    // Build Docker image
                    docker.withRegistry('', DOCKER_PASS) {
                        def docker_image = docker.build "${IMAGE_NAME}"
                    }

                    // Push Docker image with tags
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
    }
}





