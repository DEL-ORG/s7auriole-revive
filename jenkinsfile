pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3'
    }

    environment {
        APP_NAME = "test"
        RELEASE = "1.0.0"
        DOCKER_USER = "attamegnon/attamegnon2022"
        DOCKER_PASS = 'docker-hub'  // credential id for docker-hub we just created 
        IMAGE_NAME = "${DOCKER_USER}:${APP_NAME}"       // IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    }

    stages {
        stage("Cleanup Workspace") {
            steps {
    //            deleteDir()
            }
        }

        stage("Checkout from SCM") {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/revive-code']], userRemoteConfigs: [[url: 'https://github.com/DEL-ORG/s7auriole-revive.git']]])
                }
            }
        }

        stage("Build Application") {
            steps {
                script {
     //               dir('ui') {
                        sh 'mvn clean package'
                    }
                }
            }
        }

        stage("Test Application") {
            steps {
                script {
 //                   dir('ui') {
                        sh 'mvn test'
                    }
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
 //                   dir('ui') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            withSonarQubeEnv(credentialsId: 'sonarqube') {
                                sh "mvn clean verify sonar:sonar"
                            }
                        }
                    }
                }
            }
//        }

     //   stage("Quality Gate") {
    //        steps {
    //            script {
   //                 waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
  //              }
 //           }
//       }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    // Build Docker image
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image = docker.build "${IMAGE_NAME}"
                    }

                    // Push Docker image with tags
                    docker.withRegistry('', DOCKER_PASS) {
                        docker_image.push("${IMAGE_TAG}")
                        docker_image.push('latest')
                    }
                }
            }
        }
}



