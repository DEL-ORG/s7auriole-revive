pipeline {
    agent any

    tools {
        jdk 'java17'
        maven 'maven3'
    }

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKERHUB_CREDENTIALS = 'docker-hub'  // credential id for docker-hub we just created 
        TAG = 'test'
    }

    stages {
        stage("Cleanup Workspace") {
            steps {
                deleteDir()
            }
        }

        stage("Checkout from SCM") {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/test']], userRemoteConfigs: [[url: 'https://github.com/DEL-ORG/s7auriole-revive.git']]])
                }
            }
        }

        stage("Build Application") {
            steps {
                script {
                    sh 'mvn clean package'
                }
            }
        }

        stage("Test Application") {
            steps {
                script {
                    sh 'mvn test'
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        withSonarQubeEnv(credentialsId: 'sonarqube') {
                            sh "mvn clean verify sonar:sonar"
                        }
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube'
                }
            }
        }

        stage("Build & Push Docker Image") {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        // Build Docker image
                        docker.build("attamegnon/attamegnon2022:${TAG}_v0.0${env.BUILD_NUMBER}", "-f ${TAG}/Dockerfile .")

                        docker.withRegistry(DOCKER_REGISTRY, DOCKERHUB_CREDENTIALS) {
                            echo "Pushing image with TAG ${TAG}_v0.0${env.BUILD_NUMBER} to DockerHub"
                            sh "docker push attamegnon/attamegnon2022:${TAG}_v0.0${env.BUILD_NUMBER}"
                            sh "docker images"
                            sh "docker rmi -f attamegnon/attamegnon2022:${TAG}_v0.0${env.BUILD_NUMBER}"
                            sh "docker images"
                        }
                    }
                }
            }
        }
    }
}
